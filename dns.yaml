heat_template_version: 2014-10-16


description: >
  A host providing the DNS server for the OpenShift nodes.


parameters:

  key_name:
    type: string
    constraints:
    - custom_constraint: nova.keypair

  image:
    type: string
    constraints:
    - custom_constraint: glance.image

  flavor:
    type: string
    constraints:
    - custom_constraint: nova.flavor

  hostname:
    type: string

  lb_hostname:
    type: string
    default: ''

  lb_ip:
    type: string
    default: ''

  ldap_hostname:
    type: string
    default: ''

  ldap_ip:
    type: string
    default: ''

  node_etc_hosts:
    type: string
    default: ''

  domain_name:
    type: string

  floating_ip:
    type: string

  rhn_username:
    type: string

  rhn_password:
    type: string
    hidden: true

  rhn_pool:
    type: string
    hidden: true

  port:
    description: Neutron port (with a floating IP address) to assign to the DNS Nova Server
    type: string

  ssh_user:
    type: string

resources:

  dns_config_agent:
    type: collect-config-setup/install_config_agent_centos_yum.yaml

  host:
    type: OS::Nova::Server
    properties:
      name:
        str_replace:
          template: "HOST.DOMAIN"
          params:
            HOST: {get_param: hostname}
            DOMAIN: {get_param: domain_name}
      admin_user: {get_param: ssh_user}
      image: {get_param: image}
      flavor: {get_param: flavor}
      key_name: {get_param: key_name}
      networks:
      - port: {get_param: port}
      user_data_format: SOFTWARE_CONFIG
      user_data: {get_resource: init}

  init:
    type: OS::Heat::MultipartMime
    properties:
      parts:
      - config: {get_resource: set_hostname}
      - config: {get_resource: included_files}
      - config: {get_resource: add_extra_etc_hosts}
      - config: {get_resource: rhn_register}
      - config: {get_attr: [dns_config_agent, config]}
        type: multipart
      - config: {get_resource: boot_config}

  set_hostname:
    type: OS::Heat::CloudConfig
    properties:
      cloud_config:
        hostname: {get_param: hostname}
        fqdn:
          str_replace:
            template: "HOST.DOMAIN"
            params:
              HOST: {get_param: hostname}
              DOMAIN: {get_param: domain_name}

  included_files:
    type: OS::Heat::CloudConfig
    properties:
      cloud_config:
        write_files:
        - path: /etc/hosts
          content:
            str_replace:
              params:
                $NODE_IP: {get_param: floating_ip}
                $NODE_HOSTNAME: {get_param: hostname}
                $NODE_DOMAIN: {get_param: domain_name}
              template:
                {get_file: fragments/etc-hosts}
        - path: /root/dnsmasq.conf
          content:
            str_replace:
              params:
                $DOMAINNAME: {get_param: domain_name}
              template: {get_file: fragments/dnsmasq.conf}
        - path: /usr/bin/retry
          permissions: 0755
          content: {get_file: fragments/retry.sh}

  rhn_register:
    type: OS::Heat::SoftwareConfig
    properties:
      config:
        str_replace:
          params:
            $RHN_USERNAME: {get_param: rhn_username}
            $RHN_PASSWORD: {get_param: rhn_password}
            $POOL_ID: {get_param: rhn_pool}
          template: {get_file: fragments/rhn-register.sh}

  add_extra_etc_hosts:
    type: OS::Heat::SoftwareConfig
    properties:
      config:
        str_replace:
          params:
            $LB_DOMAIN: {get_param: domain_name}
            $LB_HOSTNAME: {get_param: lb_hostname}
            $LB_IP: {get_param: lb_ip}
            $LDAP_HOSTNAME: {get_param: ldap_hostname}
            $LDAP_IP: {get_param: ldap_ip}
          template: {get_file: fragments/etc-hosts-extra}

  node_add:
    type: OS::Heat::SoftwareConfig
    properties:
      group: script
      inputs:
      - name: node_etc_host
      outputs:
      - name: result
      config: |
        #!/bin/sh -x
        echo "Writing to /etc/hosts"
        #sed -i 's/.* #openshift//' /etc/hosts
        echo "$node_etc_host" >> /etc/hosts
        systemctl restart dnsmasq

  node_cleanup:
    type: OS::Heat::SoftwareConfig
    properties:
      group: script
      inputs:
      - name: node_name
      outputs:
      - name: result
      config: |
        #!/bin/sh -x
        cp /etc/hosts /etc/hosts.bkp
        grep -v "$node_name" /etc/hosts.bkp > /etc/hosts
        systemctl restart dnsmasq

  boot_config:
    type: OS::Heat::SoftwareConfig
    properties:
      config: {get_file: fragments/dnsmasq.sh}
